name: Claude Code Review

on:
  pull_request:
    types: [opened, synchronize]
    # Optional: Only run on specific file changes
    # paths:
    #   - "src/**/*.ts"
    #   - "src/**/*.tsx"
    #   - "src/**/*.js"
    #   - "src/**/*.jsx"

jobs:
  claude-review:
    # Optional: Filter by PR author
    # if: |
    #   github.event.pull_request.user.login == 'external-contributor' ||
    #   github.event.pull_request.user.login == 'new-developer' ||
    #   github.event.pull_request.author_association == 'FIRST_TIME_CONTRIBUTOR'
    
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
      issues: read
      id-token: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Run Claude Code Review
        id: claude-review
        uses: anthropics/claude-code-action@beta
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}

          # Optional: Specify model (defaults to Claude Sonnet 4, uncomment for Claude Opus 4)
          # model: "claude-opus-4-20250514"
          
          # Direct prompt for automated review (no @claude mention needed)
          direct_prompt: |
            Please review this pull request for the VNTG e-commerce platform and provide feedback on:
            
            **Architecture & Design:**
            - Component structure following atomic design principles
            - Proper use of React Context (cart, auth, checkout)
            - TypeScript type safety and proper interfaces
            - API route structure and RESTful patterns
            
            **Next.js Best Practices:**
            - Server/client component usage
            - App Router patterns
            - Image optimization and performance
            - Proper loading and error boundaries
            
            **E-commerce Specific:**
            - Cart functionality and persistence
            - Payment integration security (Stripe)
            - Authentication flow (Supabase Auth)
            - Order management and data consistency
            
            **Security & Performance:**
            - Input validation and sanitization
            - Database query security (RLS policies)
            - Bundle size and optimization
            - Mobile responsiveness and accessibility
            
            **Testing & Quality:**
            - Unit test coverage for critical functions
            - E2E tests for user flows
            - Stub API integration testing
            - Type safety validation
            
            Focus on maintainability, scalability, and production readiness. Be constructive and provide actionable suggestions.

          # Use sticky comments to update reviews on subsequent pushes
          use_sticky_comment: true
          
          # Optional: Customize review based on file types
          # direct_prompt: |
          #   Review this PR focusing on:
          #   - For TypeScript files: Type safety and proper interface usage
          #   - For API endpoints: Security, input validation, and error handling
          #   - For React components: Performance, accessibility, and best practices
          #   - For tests: Coverage, edge cases, and test quality
          
          # Optional: Different prompts for different authors
          # direct_prompt: |
          #   ${{ github.event.pull_request.author_association == 'FIRST_TIME_CONTRIBUTOR' && 
          #   'Welcome! Please review this PR from a first-time contributor. Be encouraging and provide detailed explanations for any suggestions.' ||
          #   'Please provide a thorough code review focusing on our coding standards and best practices.' }}
          
          # Allow Claude to run quality checks during review
          allowed_tools: "Bash(npm run test),Bash(npm run lint),Bash(npm run type-check),Bash(npm run validate:stubs),Bash(npm run build)"
          
          # Optional: Skip review for certain conditions
          # if: |
          #   !contains(github.event.pull_request.title, '[skip-review]') &&
          #   !contains(github.event.pull_request.title, '[WIP]')

